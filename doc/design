それは大きなプロジェクトで、詳細な要件がありますね。それを実装するための一般的な設計の手順は以下の通りです：

環境を準備する： C++ 98 を使っているため、まず必要なツール（コンパイラ、リンカーなど）をインストールします。
開発を始める前に、あなたの環境が適切に設定されていることを確認してください。

データモデルを設計する： IRCサーバの主な概念（クライアント、チャネル、オペレータなど）を表すクラスや構造体を設計します。

ネットワーク部分を設計する： IRCサーバはネットワーク通信に大きく依存しています。socketプログラミングに精通している必要があります。
非同期I/O操作が必要なため、select、poll、またはその他の同等の機能について知っておくことが重要です。

メインループを設計する： サーバは一度に多数のクライアントを処理する必要があります。
メインループは接続の受け入れ、メッセージの受信と送信、およびエラーハンドリングを行います。

IRCプロトコルを実装する： 要件に記載されているIRCコマンド（KICK、INVITE、TOPICなど）を解釈し、実行するロジックを設計します。

エラーハンドリング： サーバは多数のエラー状況に対応する必要があります。
たとえば、クライアントからの不完全なデータを適切に処理したり、低帯域幅の状況を管理したりします。

テスト： すべてのコードはテストを通過する必要があります。これは、要件に従って機能すること、またエラー状況を適切に処理することを確認するために重要です。

リファクタリングとクリーンアップ： クリーンなコードを書くことが期待されています。これは、冗長なコードを削除し、可読性と保守性を向上させるために重要です。

これらのステップは全体の設計フローを示していますが、実際の開発プロセスでは一部のステップが反復的または並行して行われる可能性があります。また、各ステップは独自の問題と課題を持っていますので、それぞれについて詳細に考えることが重要です。