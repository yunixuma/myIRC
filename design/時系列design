設定ファイルの読み込み: 
設定ファイルにはポート番号、最大接続数、セキュリティ設定など、サーバーの動作に必要な情報が含まれています。
サーバーが起動すると最初に設定ファイル（通常は.configまたはconfig.iniのような形式）を読み込みます。

Serverクラスのインスタンス化: 
設定ファイルの読み込みが終わったら、Serverクラスのインスタンスが作成されます。インスタンス化の際に、
設定ファイルから読み込んだ情報（例えばポート番号など）がServerクラスのコンストラクタに渡され、サーバーの初期設定が行われます。

ソケットの作成とバインド:
 Serverクラスのstartメソッドが呼び出されると、サーバーはソケットを作成し、指定したポートにバインドします。

接続の待ち受け開始:
#  サーバーは接続を待ち受けます。具体的には、listen関数が呼び出されて接続の待ち受けが開始され、同時にソケットは非ブロッキングモードに設定されます。

# クライアント接続の受け入れ: クライアントからの接続要求が来ると、サーバーはそれを受け入れ、新しいソケットを作成します。
						この新しいソケットは、クライアントとの通信に使用されます。

# クライアントリストへの追加: 新しく作成したソケットは、Serverクラスのclients_ベクタに追加されます。これにより、
# サーバーは複数のクライアントと同時に通信することが可能になります。

メッセージの読み取りと処理: サーバーは各クライアントからのメッセージを非同期に読み取り、それを処理します。処理が終わると、結果がクライアントに送信されます。

クライアントの切断: クライアントが切断を要求すると、サーバーはそのクライアントのソケットを閉じ、クライアントリストから削除します。

# サーバーの停止: 最後に、全てのクライアントが切断され、サーバーが停止する命令を受け取ると、サーバーは全てのリソースを解放し、プログラムを終了します。

