ソケットの作成とバインド:
サーバーはソケットを作成し、特定のポートにバインドします。
つまりソケットにとくていのアドレスを関連づける。
このソケットは、クライアントからの接続を待機するために使用されます。

接続の待機と受け入れ: 
サーバーは作成したソケットでクライアントからの接続を待機します。
クライアントが接続すると、サーバーは新しいソケットを作成してそのクライアントとの通信に使用します。
この新しいソケットは、専用のファイルディスクリプタ（FD）に関連付けられます。

非同期読み取り:
 サーバーは各クライアントとの通信に対応するソケット（FD）からの読み取りを非同期に管理します。
 これは、select, poll, epollなどのシステムコールを使用して、
 つまりselectでmonitoring してどのソケットfd が、使用可能かどうかを管理する？
 読み取り可能なfds を管理する。
 とはデータが利用可能であり、そのデータを読むためにソケットやファイルをブロックせずに仕様できる状態。

accept
			複数のソケットからのデータを効率的に読み取るために行います。
				ブロッキング動作: accept()は、デフォルトの動作としてブロッキング（待機）します。
				つまり、クライアントからの接続が来るまで、プログラムの実行がその位置で停止します。
				接続が確立すると、accept()は新しいソケットのファイルディスクリプタを返し、
				プログラムの実行を再開します。

			新しいソケット: 
				クライアントからの接続要求があると、accept()はその接続用の新しいソケットを作成します。
				この新しいソケットは、サーバーとクライアント間の通信に使用されます。
				元のソケットは、他のクライアントからの接続を待ち受け続けます。

			クライアントの情報:
				accept()はクライアントのアドレス情報も返すことができます。
				これにより、サーバーはどのクライアントからの接続かを識別することができます。

			エラー処理: 
				クライアントからの接続時に問題が発生した場合、accept()はエラーを返します。
				そのため、適切なエラー処理が必要です。



メッセージの受信と処理: 
サーバーはFDを使用してクライアントからのデータを読み取ります。
このデータはメッセージとして解釈され、パースと処理が行われます。

レスポンスの送信: 必要に応じて、サーバーはクライアントに対してレスポンスを送信します。
これも、対応するFDを通じて行われます。

接続のクローズ: クライアントが接続を閉じるか、サーバーがクライアントとの接続を閉じると、関連するFDも閉じられます。